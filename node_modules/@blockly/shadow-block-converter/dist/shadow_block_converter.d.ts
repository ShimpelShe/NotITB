/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @fileoverview Plugin for converting shadow blocks to real ones on edit.
 */
import * as Blockly from 'blockly/core';
export interface BlockShadowStateChangeJson extends Blockly.Events.BlockBaseJson {
    inputIndexInParent: number | null;
    shadowState: Blockly.serialization.blocks.State;
}
/**
 * A Blockly event class to revert a block connection's shadow state to the
 * provided state, to be used after attaching a child block that would
 * ordinarily overwrite the connection's shadow state.
 */
export declare class BlockShadowStateChange extends Blockly.Events.BlockBase {
    /**
     * The name of the event type for broadcast and listening purposes.
     */
    static readonly EVENT_TYPE = "block_shadow_state_change";
    /**
     * The index of the connection in the parent block's list of connections. If
     * null, then the nextConnection will be used instead.
     */
    inputIndexInParent: number | null;
    /**
     * The intended shadow state of the connection.
     */
    shadowState: Blockly.serialization.blocks.State;
    /**
     * The constructor for a new BlockShadowStateChange event.
     *
     * @param block The parent of the connection to modify.
     * @param inputIndexInParent The index of the input associated with the
     *     connection to modify, if it is associated with one. Otherwise the
     *     nextConnection will be used.
     * @param shadowState The intended shadow state of the connection.
     */
    constructor(block: Blockly.Block, inputIndexInParent: number | null, shadowState: Blockly.serialization.blocks.State);
    /**
     * Encode the event as JSON.
     *
     * @returns JSON representation.
     * @override
     */
    toJson(): BlockShadowStateChangeJson;
    /**
     * Decode the JSON event.
     *
     * @param json JSON representation.
     * @override
     */
    static fromJson(json: BlockShadowStateChangeJson, workspace: Blockly.Workspace, event?: any): BlockShadowStateChange;
    /**
     * Does this event record any change of state?
     *
     * @returns False if something changed.
     * @override
     */
    isNull(): boolean;
    /**
     * Run a change event.
     *
     * @param forward True if run forward, false if run backward (undo).
     * @override
     */
    run(forward: boolean): void;
}
/**
 * Add this function to your workspace as a change listener to automatically
 * convert shadow blocks to real blocks whenever the user edits a field on the
 * block, like this:
 *
 * workspace.addChangeListener(shadowBlockConversionChangeListener);
 *
 * Ideally the Blockly.Field.prototype.setValue method should handle this logic,
 * but for the purposes of this plugin it can be a workspace change listener.
 *
 * @param event An event broadcast by the workspace.
 */
export declare function shadowBlockConversionChangeListener(event: Blockly.Events.Abstract): void;
//# sourceMappingURL=shadow_block_converter.d.ts.map